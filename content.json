{"meta":{"title":"俗人","subtitle":"凡事不问","description":"你喜欢独处，却又担心寂寞，于是你爱上一阵又一阵迎面吹来的风","author":"俗人","url":""},"pages":[{"title":"about","date":"2020-05-01T14:14:36.000Z","updated":"2020-06-22T08:57:02.407Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[脚滑の俗人] 天&nbsp; 人&nbsp; （ 交（发）战（呆） ） 中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2020-05-01T13:32:48.000Z","updated":"2020-06-22T08:14:35.731Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"分类","date":"2020-04-30T16:00:00.000Z","updated":"2020-06-22T08:54:22.290Z","comments":false,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-11-07T14:30:06.029Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"留言板","date":"2020-05-01T12:17:58.000Z","updated":"2020-06-25T16:02:38.462Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"&lt;h2 align=&quot;center&quot;&gt;有什么想说的?&lt;/h2&gt; &lt;h2 align=&quot;center&quot;&gt;有什么想问的?&lt;/h2&gt; 念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"lab","date":"2019-11-05T15:33:33.000Z","updated":"2019-11-07T14:30:42.237Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"donate","date":"2019-11-05T15:33:33.000Z","updated":"2019-11-07T14:30:32.974Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2020-05-01T15:33:33.000Z","updated":"2020-06-22T09:00:48.404Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友情链接"},{"title":"music","date":"2019-11-05T15:33:33.000Z","updated":"2019-11-08T02:48:57.055Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-11-06T12:44:34.880Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-05-01T12:24:16.000Z","updated":"2020-06-22T08:55:01.931Z","comments":false,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-11-05T14:53:25.000Z","updated":"2019-11-07T13:41:01.757Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2019-11-05T15:14:38.000Z","updated":"2019-11-07T13:41:52.063Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: ' 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"理解JavaScript的重要概念","slug":"理解JavaScript的重要概念","date":"2020-06-29T16:08:31.000Z","updated":"2020-07-10T02:07:21.636Z","comments":true,"path":"post/d5b6.html","link":"","permalink":"/post/d5b6.html","excerpt":"","text":"前言​ 既然执行上下文，环境记录，作用域，作用域链，词法环境，变量环境，闭包等是JS的重要概念，那么它们对于我们来说，是不陌生的。 ​ 然而大多数人在学习前端的过程中，很少也很难从语言规范入手，所以这些概念是属于早接触，晚理解的那一类。 ​ 然而，整个学习过程中，本人虽然也尝试深入理解了这些概念，但并没有达到理想的效果（总有人在概念后面打括号，将一些概念划等号，不告诉我们为什么没问题，问题是不同的人划的等号还不同？！(╯‵□′)╯︵┻━┻），为此，我决定根据ECMAScript2021，来进一步地理解它们。 规范类型（Specification Types）在讲以上的重要概念之前，我们需要先了解这么一个概念——规范类型。 ​ 引用规范中的话： A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. ​ 规范类型，对应于算法中用于描述ECMAScript语言结构和语言类型的语义的元值。 ​ 简单来说，就是一些不可拆分的数据结构（个人理解，有误望指出），而这些数据结构，被用来描述ECMAScript这一门语言。其中包括我们熟知的列表（List），指针（Reference），集合（Set）等等，其中这里需要强调的也是规范中常用的一种数据类型，叫作记录（Record）。 记录（Record）​ 同样，引用规范中的介绍： The Record type is used to describe data aggregations within the algorithms of this specification. ​ 在本规范中，记录，是用来描述算法中数据的集合（集合体）的。 记录的值在形式上类似于我们的键值对，由字段与字段的值组成。其中字段总是形如[[Field]]。 关于规范类型和记录，就先扯这么多，大致理解前者是描述语言的元数据类型，后者是前者中的一种就先够了。我们后面会提的环境记录，就属于记录的一种。 执行上下文（Execution Contexts）——也就是作用域（Scope）这一概念在JS中的体现首先我们先来解释一下这个标题。为什么说作用域这一概念在JS中的体现是执行上下文呢？ 作用域这一概念，本就不是，也不需要由ECMAScript来定义。它的意义百度一下就能知道： 作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。 MDN中也明确地写到，Scope： The current context of execution. 只是作用域这个概念相比于执行上下文来说，前者更偏向于表示代码中名称（标识符）的可达性，而后者更偏向于表示规范中跟踪代码运行的一个程式（device）。后者的意义显得更加完整一些，当然，实际生活中我们使用的时候不一定用的那么得严谨。 作用域链前面说，JS中通过执行上下文通过来描述作用域。而作用域链这个概念呢，在规范中是不存在的。 作用域链，就是当前执行上下文的两个环境记录（Environment Record，一种记录类型），即词法环境（LexicalEnvironment），和变量环境（VariableEnvironment）以及它们所指向的其他环境记录。 这些环境记录，记录了所有的变量（whatever var、let、const）、函数、类、模块，对象，内置全局对象，内置全局对象的属性，以及顶级声明与名称的绑定关系。简单的来说，即静态作用域（静态作用域与动态作用域的概念。。。下面也有）中所有的名称（标识符）绑定。 这两个环境记录呢，就是前面所提的Record类型，因为其内部的[[OuterEnv]]字段，指向了外部执行上下文的环境记录（没有外部环境记录的，该字段值就为null），很容易抽象成链条的形式，所以被称为作用域链。 详见规范的8.1节。 那么，执行上下文到底是个什么东西？先扯一个题外话。为什么我们要理解执行上下文这个概念而不是其他？（一些小伙伴对其他概念可能也有这样的疑问，道理是一样的） ​ 我们都知道，由于流控制语句与函数调用的关系，程序并不是单纯的从上往下执行的。所以要想正确的执行代码，就需要将代码转化为正确的机器码。而这，有两种办法，编译与解释，分别对应了两种语言，编译型语言和解释型语言。 ​ 随便一查“JavaScript”，就会看到众多“脚本语言”的字眼。而脚本语言的特点之一，就是解释执行。然而为了解决解释语言解释器低效的问题，浏览器，也就是ECMAScript Implementation，引入Just-in-time编译器（JIT）。从而实现了变量提升等解释型语言难以实现的特性。 ​ 上面说了这么多，和执行上下文有什么关系，为啥要理解执行上下文？？？好吧，一个点是因为JIT是基于执行上下文来实现的。当然还有其他的原因，比如说，为了理解闭包。闭包的产生条件，闭包的工作原理等都和执行上下文有关。（那。。。为什么要理解闭包？因为经常要用啊，此处禁止套娃哈哈） ​ 回归正题，执行上下文是什么？老样子，引用： An execution context is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. ​ 有道直译是这样的： 执行上下文是一种规范设备，用于跟踪ECMAScript实现对代码的运行时评估。 ​ 那么，个人理解一下。执行上下文是一种特殊的手段，被用来跟踪不同的ES实现（例如V8引擎、Node.JS）中，代码的运行。 ​ 首先，为了跟踪（track），或者说管理执行上下文。有了执行上下文栈的概念。 The execution context stack is used to track execution contexts. The running execution context is always the top element of this stack. ​ 相信大家对这个栈的疑问并不是很大，只需要明白这里又多了个当前执行上下文（或者就叫正在运行的执行上下文，字太多了，后文就这么称呼）的概念。有疑问咱们也可以直接点链接进入规范看看，就那么一段两段话的事儿。 ​ 好家伙，一个执行上下文整出这么多事儿，我还需要其他信息才能知道他是啥！！ An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. ​ 。。。这里直译就可以了： 在实现中，执行上下文包含跟踪相关代码的执行进度所必需的，任何特定状态。 ​ 说了等于没说。。。那不然说这是规范呢！但人还是有要求的： 其中构成上，至少有六个部分（我们知道，当我们尝试理解一个新事物的时候，新事物的构成并不一定是最重要的，因为我们可能并没有达到需要了解他的地步，例如，牛奶。）： code evaluation state，Function，Realm，ScriptOrModule，LexicalEnvironment，VariableEnvironment 简单的说下我的理解。 通过一些component来构成一个执行上下文，描述了其关联的代码所能使用的外作用域（执行上下文）的变量（通过LexicalEnvironment）和内作用域的变量（通过VariableEnvironment）；这个执行上下文本身的跟踪（评估）对象（Function、Script/Module），等等。 此处我们给出规范中的介绍，其他的不再过多的解释。 简而言之， An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Whatever is necessary. \\（￣︶￣）/ 类比于牛奶，对于执行上下文的构成我们不需要了解的很深，我们将主要的精力集中在它的运行机制上，然而就很简单。 前面说了，有一个执行上下文栈来维护执行上下文。栈顶的执行上下文就是当前执行上下文。 比如说浏览器中，代码刚开始运行，负责运行JS的线程就通过某些算法（用来Enqueue Jobs）取得任务，创建第一个执行上下文，然后开始执行，此时也是当前执行上下文，每当遇到新的Function、Modul/Script时，就会创建新的执行上下文，并挂起当前的执行上下文（若没执行完的话），即新执行上下文成为栈顶，当新的执行上下文关联的代码执行完毕，即出栈后，则重新恢复刚刚挂起的执行上下文。 值得我们注意的只是，每个当前执行上下文的作用域，都包含了栈内的其他执行上下文中的作用域。 好，执行上下文没了。就这？就这。 闭包在？先看我的理解。（洗脑洗脑洗脑） 闭包，是一种，能够捕获标识符（广义上的变量），携带参数，并且以类似函数的调用方式（closure(arg1, arg2)）调用，的规范类型。 个人认为，重要的就只有两部分。 一，咳咳，它是一种规范类型（Specification Type），这是毋庸置疑的，毕竟规范里写的明明白白。（所以我们就像对待Record那样对待它就行啦，如果特别感兴趣，再去思考内存中的闭包到底是怎样的罢——函数¿） 二，它能够捕获变量，一旦闭包捕获了变量，那这些变量就不会无缘无故的消失（指垃圾回收），这也是闭包在众多场景出现的主要原因。规范中的例子也表明了这一点： Abstract Closures are created inline as part of other algorithms, shown in the following example. 1.Let addend be 41. 2.Let closure be a new Abstract Closure with parameters (x) that captures addend and performs the following steps when called: ​ Return x + addend. 3.Let val be closure(1). 4.Assert: val is 42. 在？感兴趣的还可以看看规范对闭包的描述： The Abstract Closure specification type is used to refer to algorithm steps together with a collection of values. 抽象闭包规范类型用于引用算法步骤和值的集合。 闭包的概念，实际上我认为并不难，难的另有所在。 其中之一，就是… 闭包的产生条件这一点各有各的说法，在这里我推荐一个我认为讲的很清楚的文章（波神的公众号是宝藏哦~） 引用文章中的一句话。 对于有一点 JavaScript 使用经验但从未真正理解闭包概念的人来说，理解闭包可以看作是某种意义上的重生，突破闭包的瓶颈可以使你功力大增。 另外的难点就是…… 闭包的出现场景（闭包这块对于我来说还是太难啦，所以这部分就当分享与交流咯~） 在需要清除setInterval的地方。 我们知道，每个setInterval一旦启动，就需要手动清除，并且只能在其回调函数内清除（不然呢不然呢不然呢）。这里的回调函数因为捕获了外部的定时器标识，而生成了闭包。 每一个中间模块（即接受别的模块，导出用到了这个模块的新的模块）。 这里引用一段大神的话。 本质上，JavaScript中并没有自己的模块概念，我们只能使用函数/自执行函数来模拟模块。 现在的前端工程中（ES6的模块语法规范），使用的模块，本质上都是函数或者自执行函数。 （webpack等打包工具会帮助我们将其打包成为函数） 推荐看大神的这篇文章，相信会有意想不到的收货。 ……（想不到了！！！我好菜。。） 闭包到这里就先告一段落。 其他概念变量对象（？）与活动（函数）对象不知道从什么时候起，有了变量对象和函数对象的概念，应该是一些教材里面的，由于我没有看过，，所以这些概念我也只能从规范中寻找。。。 结果只找到了活动（函数）对象的概念。就一句话： The value of the Function component of the running execution context is also called the active function object. 即，当前执行上下文的Function Component的值。这个值，在前面的图片上有说，就是当前执行上下文评估的那个函数对象。原话是： If this execution context is evaluating the code of a function object, then the value of this component is that function object. If the context is evaluating the code of a Script or Module, the value is null. 然而我没有找到变量对象的概念（暂时），所以我就结合起来理解，将他理解为非当前执行上下文的Function Component的值，即非当前执行上下文所评估的函数对象。 名称绑定&amp;绑定关系——值模型、引用模型这个概念是对所有编程语言来说的~ 所谓的名称绑定（Name binding），是指将名字和他所要代表的实体联系在一起。通常在编程语言中，名称被称为标识符。一般来说，名称绑定的实体是可以被更换的，这样的名称就是大家熟知的变量，而被绑定的实体则是变量值，通过赋值来更换变量值。 其中，变量，根据其与绑定的值的关系，可以分为值模型和引用模型。 这两种模型的差异导致的主要影响是：一个变量的值被赋予另一个变量，应用值模型时，值会被复制，副本保存在被复制的变量中，两者就此互不相关；而应用引用模型师，只是指针被复制，赋予第二个变量，数据仍然只有一份，若是其中一方修改了指针指向的数据，另一方也能看到同样的变化。 因此这两个模型，前者更安全，后者对体量巨大的数据则节省了复制的时间和空间。采用引用模型的数据，被称为引用类型，而采用值模型的数据，则被称为值类型。 JavaScript的参数传递方式JavaScript属于动态类型的语言，因为这类语言可以被赋予任何类型的值，所以基本都采用引用模型，JavaScript亦是如此。 但是值得一提的是，数据的值类型、引用类型和参数传递的两种方式——按值传递、按引用传递，是不同的概念。 按值传递将实际参数的值复制到函数的形参中，两者互不干扰；而按引用传递是将实际参数的引用传递给形参，相当于在函数内部进行了一次新的名称绑定。 对于JavaScript的参数传递方式，普遍存在两种声音。但实际上，JavaScript采用的是按值传递的方式。 在JavaScript中的所有数据都是引用类型的，只是通过创建新的实例的方式，来保证数字、字符串等数据类型的不可变性。（例如，新建一个基本数据类型，你会发现它也能调用方法） 对于引用类型的数据，按值传递可以说是自然地选择。函数对形参的改变，会实际反映到实参上（搞清楚形参与实参哟），这一点与值类型的按引用传递相同；但函数内无法更换实参的引用，对形参重新赋值，仅仅是更换了形参的引用，对实参没有影响，这一点却和值类型的按值传递相同。 静态作用域与动态作用域。。。桥豆麻袋，待我翻下书再补。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"ECMAScript2021","slug":"ECMAScript2021","permalink":"/tags/ECMAScript2021/"},{"name":"JavaScript","slug":"JavaScript","permalink":"/tags/JavaScript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"抽象操作之==比较","slug":"抽象操作之==比较","date":"2020-06-25T14:56:22.000Z","updated":"2020-06-26T05:02:45.243Z","comments":true,"path":"post/6251.html","link":"","permalink":"/post/6251.html","excerpt":"","text":"我不知道的ECMAScript2021——‘==’比较 引自 ‘Draft ECMA-262 / June 23, 2020 ECMAScript® 2021 Language Specification’ 7.2.15 Abstract Equality ComparisonThe comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows: If Type(x) is the same as Type(y), then Return the result of performing Strict Equality Comparison x === y. If x is null and y is undefined, return true. If x is undefined and y is null, return true. If Type(x) is Number and Type(y) is String, return the result of the comparison x == ! ToNumber(y). If Type(x) is String and Type(y) is Number, return the result of the comparison ! ToNumber(x) == y. If Type(x) is BigInt and Type(y) is String, then Let n be ! StringToBigInt(y). If n is NaN, return false. Return the result of the comparison x == n. If Type(x) is String and Type(y) is BigInt, return the result of the comparison y == x. If Type(x) is Boolean, return the result of the comparison ! ToNumber(x) == y. If Type(y) is Boolean, return the result of the comparison x == ! ToNumber(y). If Type(x) is either String, Number, BigInt, or Symbol and Type(y) is Object, return the result of the comparison x == ? ToPrimitive(y). If Type(x) is Object and Type(y) is either String, Number, BigInt, or Symbol, return the result of the comparison ? ToPrimitive(x) == y. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt, then If x or y are any of NaN, +∞, or -∞, return false. If the mathematical value of x is equal to the mathematical value of y, return true; otherwise return false. Return false. 注意与解读需要注意上文中的！与？，并不是JS的操作符，而是规范中运行时语义（Runtime Semantic）——ReturnIfAbrupt的shorthand。其中！与？的区别主要在调用语义处返回的Completion Record的类型（[[Type]]）上，在这里讨论的==比较中应该没什么影响，详情见规范的第五章第二节和第七章第二节： Invocations of abstract operations and syntax-directed operations that are prefixed by ? indicate that ReturnIfAbrupt should be applied to the resulting Completion Record. Similarly, prefix ! is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an abrupt completion and that the resulting Completion Record‘s [[Value]] field should be used in place of the return value of the operation. 简单总结一下==比较的算法规则： 首先==两边的操作数是否是同一类型，如果是，则同===比较。 两个操作数都是基本数据类型（Number，String，Boolean，BigInt，Symbol）： 一个 操作数是Numeric（Number、BigInt），则将另外一个操作数转成对应的数值类型来比较。 一个操作数是Boolean，则将Boolean转化成Number，再进行比较。 一个操作数是对象，则通过ToPrimitive ( input [ , PreferredType ] )，将对象转换成基本数据类型再比较。 经过转换，很多最后都会变成数值之间的比较，如果mathematical value的值相等，那返回true，否则为false。需要注意的是，NaN, +∞, -∞的出现，就代表了整个比较的结果为false。 ToPrimitive ( input [ , PreferredType ] )的转化规则如下，仅需要注意，其中用到的toString等函数可能是被内置覆盖了的，如[].toString()，其他的就不做更多的解读了： 7.1.1 ToPrimitive ( input [ , PreferredType ] )The abstract operation ToPrimitive takes argument input and optional argument PreferredType. It converts its input argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint PreferredType to favour that type. It performs the following steps when called: Assert: input is an ECMAScript language value. If Type(input) is Object, then If PreferredType is not present, let hint be “default“. Else if PreferredType is hint String, let hint be “string“. Else, Assert: PreferredType is hint Number. Let hint be “number“. Let exoticToPrim be ? GetMethod(input, @@toPrimitive). If exoticToPrim is not undefined, then Let result be ? Call(exoticToPrim, input, « hint »). If Type(result) is not Object, return result. Throw a TypeError exception. If hint is “default“, set hint to “number“. Return ? OrdinaryToPrimitive(input, hint). Return input. 7.1.1.1 OrdinaryToPrimitive ( O, hint )The abstract operation OrdinaryToPrimitive takes arguments O and hint. It performs the following steps when called: Assert: Type(O) is Object. Assert: Type(hint) is String and its value is either “string“ or “number“. If hint is “string“, then Let methodNames be « “toString“, “valueOf“ ». Else, Let methodNames be « “valueOf“, “toString“ ». For each name in methodNames in List order, do Let method be ? Get(O, name). If IsCallable(method) is true, then Let result be ? Call(method, O). If Type(result) is not Object, return result. Throw a TypeError exception.","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"ECMAScript2021","slug":"ECMAScript2021","permalink":"/tags/ECMAScript2021/"},{"name":"JavaScript","slug":"JavaScript","permalink":"/tags/JavaScript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2020-05-02T04:16:01.000Z","updated":"2020-06-23T00:38:32.821Z","comments":true,"path":"post/5742.html","link":"","permalink":"/post/5742.html","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-05-02T03:11:11.000Z","updated":"2020-06-22T14:10:12.504Z","comments":true,"path":"post/3eeb.html","link":"","permalink":"/post/3eeb.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}